#!/usr/bin/env node

const nopt = require('nopt')
const path = require('path')
const fs = require('fs')
const version = require('../package.json').version
const lifeCircle = require('../lib/life-circle')

/* 1. construct options from the command line parameters */
const knownOpts = {
  'configFile': String,
  'force': Boolean,
  'help': Boolean,
  'version': Boolean
}
const shortHands = {
  'cf': ['--configFile'],
  'f': ['--force'],
  'h': ['--help'],
  'v': ['--version']
}
const options = nopt(knownOpts, shortHands, process.argv)
const CONFIG_DIR = 'yug-config'
const CONGIF_FILENAME = 'server.config.js'
const defaultConfigPath = (function () {
  let home =  process.env[ process.platform == 'win32' ? 'USERPROFILE' : 'HOME' ]
  home = path.resolve(home, CONFIG_DIR)
  if ( !fs.existsSync(home) ) {
    shell.mkdir( '-p', home )
    shell.cp('', path.resolve( __dirname, '../' + CONGIF_FILENAME ), home)
  }
  return path.resolve( home, CONGIF_FILENAME )
})()

// these can be pass to child process through spawn
process.env.configFile = options.configFile || defaultConfigPath

/* 2. handle the command */
if (options.help) {
  console.log([
    ` Version: ${version}`,
    ' Usage: sudo yug [options]',
    '',
    ' Options:',
    '',
    '   -cf  | --configfile      [option] path to config file',
    '   -f   | --force           [option] force start',
    '   -h   | --help            [option] help information',
    '   -v   | --version         [option] version'
  ].join('\n'))
  return
}
if (options.version) {
  console.log(` Version: ${version}`)
  return
}
// const notShellMode = process.argv[2] !== 'start' && process.argv[2] !== 'start' &&
// process.argv[2] !== 'start' && process.argv[2] !== 'start'
switch (process.argv[2]) {
  case 'start':
    lifeCircle.start(options.force)
    break
  case 'restart':
    lifeCircle.restart()
    break
  case 'stop':
    lifeCircle.stop()
    break
  case 'status':
    lifeCircle.status()
    break
  default:
    lifeCircle.startNotShell()
    break
}

process.on('SIGTERM', function () {
  console.log('sigterm ...')
  process.exit(0)
})
process.on('exit', (code) => {
})
process.on('beforeExit', () => {
})
