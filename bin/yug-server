#!/usr/bin/env node

var util = require( 'util' ),
  Path = require( 'path' ),
  fs = require( 'fs' ),
  cluster = require( 'cluster' ),
  shell = require( 'shelljs' ),
  utils = require( '../lib/utils' );

var nopt = require( 'nopt' );

var knownOpts = {
  'configfile': String,
  'pidfile': String,
  'debug': Boolean,
  'port': Number,
  'help': Boolean
};

var shortHands = {
  'p': [ '--port' ],
  'd': [ '--debug' ],
  'cf': [ '--configfile' ],
  'pf': [ '--pidfile' ],
  'h': [ '--help' ]
};

var parsed = nopt( knownOpts, shortHands, process.argv );

var debug = parsed.debug ? parsed.debug : false;

var configFile = parsed.configfile ? parsed.configfile : '';
var pidFile = parsed.pidfile ? parsed.pidfile : '';
var serverPidFile = pidFile ? Path.resolve( pidFile ) : Path.join( __dirname, '../run/app.pid' );
var PID = null;
var CONFIG_DIR = 'yug-config';
var CONGIF_FILENAME = 'server.config.js';
var defaultConfigPath = getDefaultConfigPath();

if ( parsed.help ) {
  p( _help() );
  return;
}

util.debug = debug ? console.log : function() {
};

var Util = {
  getPath: function( path ) {
    return Path.normalize( Path.join( __dirname, '../' + path ) );
  }
};

var Cluster = {
  start: function() {
    this._start();
    this._watch();
  },

  _start: function () {
    console.log( 'pid is ->', PID );

    for ( var id in cluster.workers ) {
      cluster.workers[ id ].kill();
    }

    var os = require( 'os' ),
      count = os.cpus().length;
    // count
    for ( var i = 0; i < 1; i++ ) {
      cluster.fork();
    }

    cluster.on( 'exit', function ( worker ) {
      util.log( 'worker ' + worker.process.pid + ' died' );
    });
  },

  _watch: function() {
    var self = this;
    var path = '';

    if ( configFile ) {
      if ( fs.existsSync( configFile ) ) {
        path = configFile;
      }
    } else {
      if ( fs.existsSync( defaultConfigPath ) ) {
        path = defaultConfigPath;
      }
    }

    if ( !path ) {
      throw new Error( 'config.js does not exist' );
    }

    var watcher = fs.watch( path );

    watcher.on( 'change', function() {
      utils.schedule( 'start-cluster', function () {
        self._start();
      }, 2000 );
    });
  }

};

var Server = {
  start: function() {
    var server = require( '../lib/server' );
    var config = {};

    if ( configFile ) {
      if ( fs.existsSync( configFile ) ) {
        config = require( configFile );
      }
    } else {
      if ( fs.existsSync( defaultConfigPath ) ) {
        config = require( defaultConfigPath );
      } else {
        throw new Error( 'config.js does not exist' );
      }
    }

    config = this.prepare(config)

    var sslport = config.sslport
    var app = server(config)

    if (sslport) {
      var https = require('https');
      var httpsOpt = {
        key: fs.readFileSync( Path.join(__dirname, '../cert/server-key.pem') ),
        cert: fs.readFileSync( Path.join(__dirname, '../cert/server-cert.pem') ),
        ca: [fs.readFileSync( Path.join(__dirname, '../cert/ca-cert.pem') )]
      };

      https.createServer(httpsOpt, app.callback())
        .listen( sslport || 443 )
        .on( 'error', function(e) {
          util.error(e);
        });
    }

    app.listen( config.port ).on( 'error', function(e) {
      util.error(e);
    });
  },

  prepare: function( config ) {
    var port = parsed.port;

    if ( port ) {
      config.port = port;
    }

    debug && ( config.debug = true );

    return config;
  }
};

function getDefaultConfigPath () {
  var home =  process.env[ process.platform == 'win32' ? 'USERPROFILE' : 'HOME' ];
  home = Path.resolve( home, CONFIG_DIR );
  if ( !fs.existsSync( home ) ) {
    shell.mkdir( '-p', home );
    shell.cp( '', Path.resolve( __dirname, '../' + CONGIF_FILENAME ), home );
  }
  return Path.resolve( home, CONGIF_FILENAME );
}

function _help() {
  return [
    ' Usage: sudo yug-server [options]',
    '',
    ' Options:',
    '',
    '   -d   | --debug           [option] enable debug mode',
    '   -p   | --port            [option] port num',
    '   -cf  | --configfile      [option] path to config file',
    '   -h   | --help            [option] help information'
  ].join('\n');
}

function p() {
  console.log.apply( console, arguments );
}

if (cluster.isMaster) {
  PID = process.pid;
  fs.writeFileSync( serverPidFile, PID );
}

if ( !debug && cluster.isMaster ) {
  Cluster.start();
} else {
  Server.start();
}

process.on('SIGTERM', function () {
  console.log('sigterm ...');
  process.exit(0);
});
