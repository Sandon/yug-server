#!/usr/bin/env node

const util = require('util')
const Path = require('path')
const fs = require('fs')
const cluster = require('cluster')
const shell = require('shelljs')
const utils = require('../lib/utils')
const nopt = require('nopt')

const CONFIG_DIR = 'yug-config'
const CONGIF_FILENAME = 'server.config.js'
const defaultConfigPath = (function () {
  let home =  process.env[ process.platform == 'win32' ? 'USERPROFILE' : 'HOME' ]
  home = Path.resolve(home, CONFIG_DIR)
  if ( !fs.existsSync(home) ) {
    shell.mkdir( '-p', home )
    shell.cp('', Path.resolve( __dirname, '../' + CONGIF_FILENAME ), home)
  }
  return Path.resolve( home, CONGIF_FILENAME )
})()

const knownOpts = {
  'configfile': String,
  'pidfile': String,
  'debug': Boolean,
  'port': Number,
  'help': Boolean
}
const shortHands = {
  'p': [ '--port' ],
  'd': [ '--debug' ],
  'cf': [ '--configfile' ],
  'pf': [ '--pidfile' ],
  'h': [ '--help' ]
}

let parsed = nopt(knownOpts, shortHands, process.argv)
let debug = parsed.debug
let configFile = parsed.configfile || defaultConfigPath
let serverPidFile = parsed.pidfile ? Path.resolve( parsed.pidfile ) : Path.join( __dirname, '../run/app.pid' )
let PID = null

if (parsed.help) {
  console.log([
    ' Usage: sudo yug-server [options]',
    '',
    ' Options:',
    '',
    '   -d   | --debug           [option] enable debug mode',
    '   -p   | --port            [option] port num',
    '   -cf  | --configfile      [option] path to config file',
    '   -h   | --help            [option] help information'
  ].join('\n'))
  return
}

var Cluster = {
  start: function() {
    this._start()
    this._watch()
  },
  
  _start: function () {
    console.log( 'pid is ->', PID )
    
    for ( var id in cluster.workers ) {
      cluster.workers[id].kill()
    }
    
    const os = require( 'os' )
    const count = os.cpus().length
    for (var i = 0; i < count; i++) {
      cluster.fork()
    }
    
    cluster.on( 'exit', function ( worker ) {
      util.log( 'worker ' + worker.process.pid + ' died' )
    })
  },
  
  _watch: function() {
    let self = this
    
    if (!fs.existsSync(configFile)) {
      throw new Error( `config file '${configFile}' does not exist` )
    }
    
    const watcher = fs.watch(configFile)
    watcher.on('change', function () {
      utils.schedule( 'start-cluster', function () {
        self._start()
      }, 2000)
    })
  }
  
}

var Server = {
  start: function() {
    const config = require(configFile)
    config.port = parsed.port || config.port
    config.debug = debug || config.debug
    
    const server = require('../lib/server')
    const app = server(config)
    
    if (config.sslport) {
      const https = require('https')
      const httpsOpt = {
        key: fs.readFileSync( Path.join(__dirname, '../cert/server-key.pem') ),
        cert: fs.readFileSync( Path.join(__dirname, '../cert/server-cert.pem') ),
        ca: [fs.readFileSync( Path.join(__dirname, '../cert/ca-cert.pem') )]
      };
      
      https.createServer(httpsOpt, app.callback())
        .listen( config.sslport || 443 )
        .on( 'error', function(e) {
          util.error(e)
        })
    }
    
    app.listen(config.port).on('error', function(e) {
      util.error(e)
    })
  }
}

if (cluster.isMaster) {
  PID = process.pid
  fs.writeFileSync(serverPidFile, PID)
}

if (!debug && cluster.isMaster) {
  Cluster.start()
} else {
  Server.start()
}

process.on('SIGTERM', function () {
  console.log('sigterm ...')
  process.exit(0);
})

